\section{Technical details}\label{sec:technical}

\pkg{iNZight}'s interface is written with \proglang{R} using three main supporting packages.
\pkg{gWidgets2} \citep{gWidgets2} provides a simple widget-based \gls{api} to building a cross-platform interface with \proglang{R}, with wrappers for Tcltk, Qt, and GTK2.\footnote{citations? URLs? styling? check R Command + Deducer papers.}
We chose GTK2, as it was the most feature rich and---at the time---had the best cross-platform support (see \cref{sec:os-reqs}).
The GTK2 binaries are accessed through \proglang{R} using the \pkg{RGtk2} package \citep{RGtk2}, with commands translated from \pkg{gWidgets2} using the \pkg{gWidgest2RGtk2} package \citep{gWidgets2RGtk2}.
Together, these packages provide a platform-independent \gls{api} for creating a \gls{gui} with \proglang{R}.


The \gls{gui} for \pkg{iNZight} uses an \gls{oop} framework in \proglang{R} called \emph{reference classes} (from the \pkg{methods} packages included with the base \proglang{R} distribution).
The same framework is used by \pkg{gWidgets2} to describe individual components of the interface.
Each piece of the \gls{gui} is a \emph{class}, with individual buttons, methods (actions), and even smaller sub-components.
\Gls{oop} allows for \emph{inheritance}, so developers can describe a general class which can be shared by several related `child' components, but which may have different layouts or methods;
this is what drives the add-on system (\cref{sec:addons}).
\Cref{fig:inzight_main_widgets} shows the \pkg{iNZight} \gls{gui} with some of the major class components annotated.

\begin{figure}[tp]
    \centering
    \includegraphics[width=0.9\textwidth]{figure/inzight_main_widgets.png}
    \caption[The reference class components of the iNZight interface.]{\label{fig:inzight_main_widgets} The reference class components of the \pkg{iNZight} interface, some of which are themselves made from several child objects.}
\end{figure}

In addition to the ``visible'' class components, others exist behind-the-scenes, the main one being the \class{iNZDocument} class which stores the state of the application, including the data set, variable selection, any survey design information, and plot settings.
The \class{iNZDataNameWidget} component visible in the top-left of \cref{fig:inzight_main_widgets} displays a list of documents, allowing the user to switch between them,
from the \menu{Data} menu, several loaded datasets can be merged together.


The structure of each class is, in most cases, a set of attributes that the user can control, stored as \emph{properties} of the class.
There is also a set of \emph{methods} which can be used by the class to react to user input or perform actions.
Most components have a main method which performs the primary function of the component.
For example, the \class{iNZFilterData} class contains a \fct{filter\_data} method which takes the user's input and passes it to an appropriate \emph{wrapper} function.
A skeleton example of the \menu{Filter Data} window class is shown in \cref{lst:filter}.
In this oversimplified example, the user is given a drop-down \fct{gcombobox} to choose a variable to filter on.
When they click the \menu{Filter} button, the data is filtered and passed back to the main \gls{gui}.
The method uses \fct{switch} to select the appropriate wrapper function within the \pkg{iNZightTools} package based on the user's chosen value of ``type''.
The actual class for the \menu{Filter Data} method is more complicated, and includes reactive components so only the relevant inputs are displayed to the user.

\begin{lstfloat}[tp]
    \caption{Reference class definition for filter window example.}
    \label{lst:filter}
    \begin{Code}
    iNZFilterData <- setRefClass(
        "iNZFilterData",
        fields = list(
            GUI = "ANY",
            data = "data.frame",
            type = "ANY",
            variable = "ANY",
            operator = "ANY",
            value = "ANY",
            ...
        ),
        methods = list(
            initialize = function(gui) {
                initFields(GUI = gui, data = gui$getActiveData())
                # ... construct GUI inputs ...
                # e.g.,
                type <<- gradio(c("Numeric value", "Factor levels", "Random"))
                variable <<- gcombobox(colnames(data))
                okbtn <- gbutton("Filter", handler = function(h, ...) filter_data())
            },
            filter_data = function() {
                filtered_data <- switch(svalue(type, index = TRUE),
                    iNZightTools::filterNumeric(
                        data,
                        var = variable,
                        op = operator,
                        num = value),
                    ...
                )
                GUI$update_data(filtered_data)
            }
        )
    )
    \end{Code}
\end{lstfloat}


Each major component has a similiar structure to \cref{lst:filter}, with calls to various functions, many of which come from other \pkg{iNZight*} packages.
Plots are generated by calls to \fct{iNZightPlots::inzplot}, while data import is handled by \fct{iNZightTools::smart\_read}.
The wrappers enforce separation of the interface and data logic so that the \gls{gui} is only concerned with the input values.

<<quick_hack,echo=FALSE>>=
code <- function(x) tidy_all_code(iNZightTools::code(x))
url <- "https://www.stat.auckland.ac.nz/~wild/data/test/nls.dta"
if (!file.exists("nls.dta"))
    download.file(url, "nls.dta")
@
Another advantage of having components calling external functions is that the wrapper functions can include the lower-level \proglang{R} code used to generate the result, which the \gls{gui} can fetch from the returned data and attach to the script described in \cref{sec:code-writing} all while keeping the \gls{gui} and data-oriented code separate.
Here is an example using \fct{iNZightTools::smart\_read}:
<<code_from_result>>=
library("iNZightTools")
data <- smart_read("nls.dta")
cat(code(data), sep = "\n")
@
The \fct{iNZightTools::code} function returns the \proglang{R} code attached to the resulting object, allowing a user to see that the \pkg{haven} package \citep{haven} was used to read this \proglang{Stata} file (\code{.dta}).
Beginner \proglang{R} users need only learn the one function---\fct{smart\_read}---but can easily dive into the underlying code and edit it as necessary to access advanced options.

While the \gls{gui} packages provide the structure of the visual \gls{gui}, it's the collection of \proglang{R} packages developed alongside \pkg{iNZight} that power the program.
The main reason for creating separate packages was to force the separation of interface and data logic.
However, it also allowed for the parallel development of a separate interface (\cref{sec:online}) using the same wrapper functions.
The collection of packages within the \pkg{iNZight} project are described in \cref{tab:inzight_pkgs}.
Most of these packages have been designed with simple high-level interfaces that are both useful for connecting to the \gls{gui}, but also for beginners to use standalone.


<<inzight_pkgs,echo=FALSE,results=tex>>=
library(magrittr)
library(kableExtra)

pkgs <- c(
    "\\pkg{iNZight}" = 'The main package for the \\gls{gui}',
    "\\pkg{iNZightModules}" = "An additional \\gls{gui} package providing additional modules for the main \\pkg{iNZight} program.",
    "\\pkg{iNZightPlots}" = "Provides plot function \\fct{inzplot} along with \\fct{inzsummary} for descriptive statistics and \\fct{inzinference} for inference and hypothesis testing.",
    "\\pkg{iNZightRegression}" = "Plots and summaries of regression models, including from \\fct{lm}, \\fct{glm}, and \\fct{survey::svyglm} objects.",
    "\\pkg{iNZightTS}" = "Time series visualisation, decomposition, and forecasting.",
    "\\pkg{iNZightMR}" = "Visualisation and estimation of multiple response data.",
    "\\pkg{iNZightTools}" = 'A suite of helper functions for data process and variable manipulation.'
)
tab <- data.frame(Package = names(pkgs), Description = as.character(pkgs))
knitr::kable(tab, "latex", booktabs = TRUE,
    caption = 'iNZight R package family',
    label = 'inzight_pkgs',
    linesep = "",
    escape = FALSE) %>%
    column_spec(2, width = "10cm") %>%
    kable_styling(font_size = 8)
@




\subsection{Usage}\label{sec:usage}

At its core, \pkg{iNZight} is an \proglang{R} package that can be installed and run like any other, as covered in \cref{sec:installation}.
Once installed, the main program can be started by calling the function of the same name:
<<manual_usage,eval=FALSE>>=
library("iNZight")
iNZight()
@
This can optionally take a \code{data} argument, which will launch \pkg{iNZight} with the data loaded and ready to explore.
Another use-case of the data argument could be to include within an \proglang{R} script used by a research group where the data needs to be loaded in a specific way (for example from a secure database). Users need only source a script similar to the following.
\begin{CodeInput}
library("DBI")
con <- dbConnect(...)
tbl_data <- dbGetQuery(con, "SELECT ...")
library("iNZight")
iNZight(data = tbl_data)
\end{CodeInput}

For development purposes, it is preferable to initialize the \gls{gui} object manually:
\begin{CodeInput}
ui <- iNZGUI$new()
ui$initializeGui()
\end{CodeInput}
This way users have access to the \class{iNZGUI} object and can explore states and trigger actions for easier testing.
In these next two commands, the first returns the dimensions of current data, while the second sets the first variable drop-down value to \code{height}.
\begin{CodeChunk}
\begin{CodeInput}
R> dim(ui$getActiveData())
\end{CodeInput}
\begin{CodeOutput}
[1] 500  10
\end{CodeOutput}
\begin{CodeInput}
R> ui$ctrlWidget$V1box$set_value("height")
\end{CodeInput}
\end{CodeChunk}
