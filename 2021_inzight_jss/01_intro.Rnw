\section{Introduction}\label{sec:intro}

\begin{leftbar}
    \textsc{Merge this in somewhere}

    The name \pkg{iNZight} is a play-on-words blending "insight" with the initials of our home country of New Zealand. It is a \gls{gui} system written in \proglang{R} and a collection of associated \proglang{R} packages.
\end{leftbar}

The open source statistical programming environment \proglang{R} \citep{rcore},used throughout statistics and data science, is supported by a repository of thousands of free packages providing access to the latest statistical techniques and graphics, plus a wide range of other tasks.
Among these packages are several \glspl{gui} providing point-and-click methods for interacting with \proglang{R} to create graphs, test hypotheses, and access a range of other statistical methods without any need to grapple with \proglang{R} code (but with opportunities to do so if desired).
Two prominent examples are \proglang{R} Commander \citep{Rcommander,Fox_2016} and \pkg{Deducer} \citep{Deducer}.
\proglang{R} Commander includes a full interface which displays, writes, and runs user-editable \proglang{R}~code, while \pkg{Deducer} extends the \proglang{R} console with menus from which users can access \gls{gui} interfaces for a range of methods.
\citeauthor{Muenchen_2020}'s \citeyearpar{Muenchen_2020,Muenchen_2020b} reviews \gls{gui} interfaces to \proglang{R}, including BlueSky Statistics \citep{BlueSky}, Jamovi \citep{jamovi}, and \pkg{RKWard} \citep{RKWard}.
Each of these \glspl{gui} provide point-and-click interfaces that let users perform a set of procedures without the need to remember the \proglang{R} function and argument names.
However, they do require prior knowledge of the names of the underlying statistical procedures they want to invoke, what they do, and how to use them.

The ability to explore, visualize, and analyse data without prior knowledge of statistical procedures is \pkg{iNZight}'s foundational design principle and the major point of difference from other \proglang{R} \gls{gui} interfaces.
This approach has been applied to \pkg{iNZight}'s capability to appropriately, and seamlessly, handle data from complex survey designs, which other \proglang{R} \gls{gui} interfaces are not able to do (see \cref{sec:surveys}).

\begin{leftbar}

As we have noted in \cite{Wild_2021}, co-author Andrew Sporle is involved with statistical and health agencies in several small nations in the Pacific.
Overwhelmed by the information needs of their own societies and by the reporting demands of key international agencies such as the United Nations, they face the triple burden of distance, small workforces and insufficient funding.
As a result, these countries find it difficult to recruit and retain people with good data science skills, or afford to contract outside expertise.
There are also increasing numbers of community groups, like the indigenous data movements linked by the Global Indigenous Data Alliance\footnote{\url{https://www.gida-global.org/}} that Andrew is involved with, who want to make data resources contribute to addressing their administrative, planning and lobbying needs, but may not have the required skills or the ability to pay for them.
\pkg{iNZight} not only provides an accessible solution to their needs, but also does it without the need to upload data beyond their own data environment.
Control over the data is maintained.\footnote{Something about data sovereignty here.}
The situation is very similar for subject-matter researchers from many areas who have projects with potential societal value, but who lack funds or access to technical skills.
The unmet data-science needs of those lacking in money and data-education can be every bit as real and important as those who have more.
Since there will never be enough altruistic, skilled volunteers to meet all these needs, it is important to empower more people to do more for themselves.
And while all of the \proglang{R} \glspl{gui} do this at some level, we will now highlight some key elements that have been overlooked.

For groups like those we have described, generalists need to be empowered to do things that currently only specialists can do.
Typically, these generalists are already busy---and thus time-poor---and they have very little data-related education.
Addressing the lack-of-knowledge problem with up-front education runs smack into the lack-of-time problem.
Additionally, generalists tend to do many different things and to work in specific processes only infrequently.
So working around the rapid fading of memories of how to do things and what they mean is also a major factor.
This collides with ``the problem of names'' alluded to above.
With programming and almost all \gls{gui} systems, you basically cannot do anything until you know what you want to do and know/remember its name.
This is a significant barrier to getting started and also results in significant time-losses getting back up to speed after a period of inactivity.
Those in another important group we address, students taking service courses in statistics and data science, experience long time delays between what they learn in class and almost anything they end up applying in real life.
To circumvent these difficulties and seriously empower these groups, we need tools that reduce the demands for up-front knowledge and place much less reliance on leaky memories.
The \pkg{iNZight} project is addressing these problems.

The basic mode of \pkg{iNZight} provides visualizations and analysis for data in standard units/cases-by-variables format.
It has a ``variable-first'' design.
In basic mode, the program is driven by assigning roles to variables with immediate responses determined by variable-type and defaults (variable-types currently recognized are: categorical, numeric and date-time).
The underlying metaphor is, ``Tell me about \ldots'', so tell me about a variable, or a relationship between two variables---either alone or subsetted/facetted by other variables.
Here, ``Tell me about'' is really shorthand for ``Show and Tell'' because what is delivered instantly is graphics because we believe graphics are the most accessible artefacts for broad audiences, and also that people are less likely to do silly things when they look at their data first.

To obtain numeric information, you explicitly ask for it by clicking \menu{Get Summary} or \menu{Get Inference}.
The underlying metaphor for both is, ``give me the types of information analysts generally want to see in a situation like this''.
So Get Inference gives users their analyses of variance, chi-squared tests, regression panels, etc., in situations where they are appropriate, accompanied by sets of relevant confidence intervals.
But users don't have to know/remember what to ask for and how to ask for it, thus reducing the barriers to entry and to re-entry after a time gap.
After-the-fact information concerning ``how can I read this and what does it mean?'' has compelling relevance when you have output in front of you.
The up-front knowledge required by \pkg{iNZight} in its basic mode is simply some high-level familiarity with rectangular data, variables and the ability to identify situations where they might want to override a variable-type default (e.g., numeric codes used as group labels).

In the above we have automated everything using defaults and delivered immediate results.
This, however, begs the question, ``How else can I look at this?'' A plot-type selection box allows scrolling (with a mouse wheel or arrow key) through plots from all the applicable graph-types in the Financial Times Visual Vocabulary\footnote{\url{http://www.vizwiz.com/2018/07/visual-vocabulary.html}} with some additions.
Use of defaults also begs, ``How else can I do this?'', i.e., making available applicable alternatives to default methods.
Inferences, for example, may be based on normal theory or bootstrapping and a switch can turn on epidemiological versions of outputs (odds-ratios, risk-ratios, etc).
Options for plot enhancements are extensive including: overriding small-data/large-data defaults for graphics; information-adding mechanisms like coloring and sizing by further variables (also plotting symbol by variable); adding trends and other inferential mark-up; identification and labelling of points; motion (playing through a set of faceted graphs); interactivity; and also many additional modifications that might be desired for aesthetic reasons.

\pkg{iNZight}'s high-level, variable-driven, requests accompanied by instant results facilitates and encourages rapid data exploration.
It also makes performing data-analysis tasks more accessible to a much broader range of individuals and organisations.

\end{leftbar}

Designed with ``variable-first'' concepts, \pkg{iNZight} is more approachable and has a focus on exploration, with a special emphasis on graphics.
The software encourages users to explore the variables in their dataset using automated plots, with summary statistics and inference information accessed via designated buttons.
These summaries and inferences display information relevant to the chosen variables, so users do not need to know in advance that the test used to compare the means of two groups is a $t$-test:
the software provides a list of applicable tests.
This concept is used throughout \pkg{iNZight}, making it ideal for not only beginners new to statistics, but to researchers who may need to perform simple tasks on an infrequent basis as well.
Additionally, it makes performing some data analysis tasks more accessible to organisations who would otherwise need to train individuals within their organisation, or hire specialists---both of which require time and money.
Since \pkg{iNZight} is more approachable and easier to use, it makes several data analysis tasks more accessible, so organisations can use \pkg{iNZight} as an in-house research tool rather than training researchers to use more complex systems or contracting out these tasks, both of which cost time, money, or both.
The philosophical underpinnings of \pkg{iNZight}, together with the main metaphors underlying its interface, are described in \cite{Wild_2021} and \cite{Wild_2022}.\footnote{Q: do this, or bring things from that paper?}


Like other \proglang{R} \glspl{gui}, there is a code component to \pkg{iNZight}.
\proglang{R} Commander includes a dedicated code box, while \pkg{Deducer} runs on top of the \proglang{R} console using the existing environment.
With \pkg{iNZight}, however, code is evaluated ``behind the scenes'', and is not directly editable by users.
Every action the user makes calls one or more \proglang{R} functions, and the code is added to the \emph{code history} for users to review, save, and share.
Users can generate an \proglang{R} script unique to their data and later edit and run the code manually in \proglang{R}, allowing researchers to quickly develop a scripted, reproducible workflow for working with data that can easily be modified as needed.
The script can also be used as a stepping stone for learning to code in \proglang{R}, particularly useful for students and other users needing to reproduce results or auomate workflows.


The \pkg{iNZight} pacakge has been adopted throughout New Zealand's statistical education programs from the year~9 school curriculum to postgraduate statistics courses.
In addition, the combination of \pkg{iNZight}'s simplicity and powerful tool set make it a popular choice for research organisations and national statistics offices, including the Australian Bureau of Statistics and Statistics New Zealand.
So the same statistical freeware can be used from high school to research environments, creating a simplified pathway for the development of futre statistical analysts.
This paper provides an overview of \pkg{iNZight}'s main features, technical details of its development, an introduction to the \emph{add-on} system, and a description of the install process.\footnote{Move to end of abstract?}
