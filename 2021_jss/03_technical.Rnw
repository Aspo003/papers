\section{Technical details}\label{sec:technical}

The interface for \pkg{iNZight} is developed entirely within \proglang{R} with the support of three main packages.
\pkg{gWidgets2} \citep{gWidgets2} and \pkg{gWidgets2RGtk2} \citep{gWidgets2RGtk2} provide a simple widget-based \gls{api} to building a cross-platform interface with \proglang{R}.
The second package, \pkg{gWidgets2RGtk2}, is an interfacing package which provides a lower-level wrapper for the more complex functionality within the \pkg{RGtk2} package \citep{RGtk2}, which itself calls back to \proglang{C} libraries for the GTK+ windowing system \citep{gtk}.
Together, these packages provide a platform- and library-independent \gls{api} for creating windows with user inputs from \proglang{R}.

The framework used to build \pkg{iNZight} is an \gls{oop} framework, which is well suited to \glspl{gui},\footnote{why} of which there are several within \proglang{R}.
\pkg{iNZight} uses \emph{reference classes}, as used by \pkg{gWidgets2}, to describe individual components of the interface.
Each `panel' is a \emph{class}, with individual buttons, methods (actions), and even smaller sub-components which are themselves classes.
\Gls{oop} also allows for \emph{inheritance}, allowing developers to describe a general class which can be shared to several related components, but which may have different layouts or methods.
\Cref{fig:inzight_main_widgets} shows the \pkg{iNZight} \gls{gui} with some of the major class components annotated.

\begin{figure}[tp]
    \centering
    \includegraphics[width=\textwidth]{figure/inzight_main_widgets.png}
    \caption[The reference class components of the iNZight interface.]{\label{fig:inzight_main_widgets} The reference class components of the \pkg{iNZight} interface, some of which are themselves made from several child objects.}
\end{figure}

In addition to these ``visible'' class components, others exist behind-the-scenes.
The prominent example is the \class{iNZDocument} class which stores the state of the application, including the data set, variable selection, any survey design information, and plot settings.
The \class{iNZDataNameWidget} component visible in the top-left of \cref{fig:inzight_main_widgets} provides a list of documents the user can switch between and, from the \menu{Data} menu, merge several loaded datasets together.


The structure of each class is, in most cases, a set of attributes that the user can control, stored as \emph{properties} of the class.
There is also a set of \emph{methods} which can be used by the class to react to user input, or perform actions.
Most components have a main \emph{action} method, which performs the primary action of the component.
For example, the \class{iNZFilterData} class contains a \fct{filter\_data} method which takes the user's input and passes it to one or more \emph{wrapper} functions, such as \fct{iNZightTools::filterNumeric}.
A skeleton example of the \menu{Filter Data} window class is shown in \cref{lst:filter}.
In this oversimplified example, the user will be displayed a drop-down \fct{gcombobox} to choose a variable to filter on.
When they click the \menu{Filter} button, the data will be filtered and passed back to the main \gls{gui}.
Here, the method uses a \fct{switch} function to select the appropriate wrapper function within the \pkg{iNZightTools} package based on the user's chosen value of ``type''.
The actual class for the \menu{Filter Data} method is much more complicated, and includes reactive components so only the relevant inputs are displayed to the user.

\begin{lstfloat}[tp]
    \caption{Reference class definition for filter window example.}
    \label{lst:filter}
    \begin{Code}
    iNZFilterData <- setRefClass(
        "iNZFilterData",
        propoerties = list(
            GUI = "ANY",
            data = "data.frame",
            type = "ANY",
            variable = "ANY",
            operator = "ANY",
            value = "ANY",
            ...
        ),
        methods = list(
            initialize = function(gui) {
                initFields(GUI = gui, data = gui$getActiveData())
                # ... construct GUI inputs ...
                # e.g.,
                type <<- gradio(c("Numeric value", "Factor levels", "Random"))
                variable <<- gcombobox(colnames(data))
                okbtn <- gbutton("Filter", handler = function(h, ...) filter_data())
            },
            filter_data = function() {
                filtered_data <- switch(svalue(type, index = TRUE),
                    iNZightTools::filterNumeric(
                        data,
                        var = variable,
                        op = operator,
                        num = value),
                    ...
                )
                GUI$update_data(filtered_data)
            }
        )
    )
    \end{Code}
\end{lstfloat}


Each major component has a similiar structure, and calls to various functions, many of which come from other \pkg{iNZight*} packages.
For example, plots are generated by calls to \fct{iNZightPlots::inzplot}, while data import is handled by \fct{iNZightTools::smart\_read}.
This import function uses the file extension to guess the file type and load the data using the appropriate methods.
The wrappers enfore separation of the interface and data logic so that the \gls{gui} is only concerned with the input values.

<<quick_hack,echo=FALSE>>=
code <- function(x) tidy_all_code(iNZightTools::code(x))
url <- "https://www.stat.auckland.ac.nz/~wild/data/test/nls.dta"
if (!file.exists("nls.dta"))
    download.file(url, "nls.dta")
@
A second advantage of having components calling external functions is that these wrapper functions can be designed to include the lower-level \proglang{R} code used to generate the result, which the \gls{gui} can fetch from the returned data and attach to the script discussed in \cref{sec:code-writing}.
Here is an example of the result returned by \fct{iNZightTools::smart\_read}:
<<code_from_result>>=
library("iNZightTools")
data <- smart_read("nls.dta")
cat(code(data), sep = "\n")
@
The \fct{iNZightTools::code} function returns the \proglang{R} code attached to the resulting object, allowing a user to see that the \pkg{haven} package \citep{haven} was used to read this \proglang{Stata} file (\code{.dta}).
Beginner \proglang{R} users need only learn the one function---\fct{smart\_read}---but can easily dive into the underlying code and edit it as necessary to access advanced arguments.

While the \gls{gui} packages provide the structure of the visual \gls{gui}, it's the collection of \proglang{R} packages developed alongside \pkg{iNZight} that power the program.
The main reason for creating separate packages was to force the separation of interface and data logic, but also to allow parallel development of a separate interface (\cref{sec:online}) using the same wrapper functions.
The collection of packages within the \pkg{iNZight} project are described in \cref{tab:inzight_pkgs}.
Most of these packages have been designed with simple high-level interfaces that are both useful for connecting to the \gls{gui}, but also for beginners to use standalone.


<<inzight_pkgs,echo=FALSE,results=tex>>=
library(magrittr)
library(kableExtra)

pkgs <- c(
    "\\pkg{iNZight}" = 'The main package for the \\gls{gui}',
    "\\pkg{iNZightModules}" = "An additional \\gls{gui} package providing additional modules for the main \\pkg{iNZight} program.",
    "\\pkg{iNZightPlots}" = "Provides plot function \\fct{inzplot} along with \\fct{inzsummary} for descriptive statistics and \\fct{inzinference} for inference and hypothesis testing.",
    "\\pkg{iNZightRegression}" = "Plots and summaries of regression models, including from \\fct{lm}, \\fct{glm}, and \\fct{survey::svyglm} objects.",
    "\\pkg{iNZightTS}" = "Time series visualisation, decomposition, and forecasting.",
    "\\pkg{iNZightMR}" = "Visualisation and estimation of multiple response data.",
    "\\pkg{iNZightTools}" = 'A suite of helper functions for data process and variable manipulation.'
)
tab <- data.frame(Package = names(pkgs), Description = as.character(pkgs))
knitr::kable(tab, "latex", booktabs = TRUE,
    caption = 'iNZight R package family',
    label = 'inzight_pkgs',
    linesep = "",
    escape = FALSE) %>%
    column_spec(2, width = "10cm") %>%
    kable_styling(font_size = 8)
@




\subsection{Usage}\label{sec:usage}

At its core, \pkg{iNZight} is simply an \proglang{R} package that can be installed and run like any other, as covered in \cref{sec:installation}.
Once installed, the main program can be started by creating a new instance of the main \gls{gui} class \class{iNZGUI}, as demonstrated below.
<<manual_usage,eval=FALSE>>=
library("iNZight")
ui <- iNZGUI$new()
ui$initializeGui()
@
For most users, however, the simpler wrapper function \fct{iNZight} can be called instead.
This can optionally take a \code{data} argument, which will launch \pkg{iNZight} with the data loaded and ready to explore.

For development purposes, the former startup method is recommended, as it provides access to the \class{iNZGUI} object created to explore states and trigger actions for easier testing.
In these two commands, the first returns the dimensions of current data, while the second sets the first variable drop-down value to \code{height}.
\begin{CodeChunk}
\begin{CodeInput}
dim(ui$getActiveData())
\end{CodeInput}
\begin{CodeOutput}
[1] 500  10
\end{CodeOutput}
\begin{CodeInput}
ui$ctrlWidget$V1box$set_value("height")
\end{CodeInput}
\end{CodeChunk}
