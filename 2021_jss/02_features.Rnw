\section[A tour of iNZight's features]{A tour of \pkg{iNZight}'s features}\label{sec:features}

The primary audience for \pkg{iNZight} are students of statistics and data science, but secondary groups include small research groups with small budgets and organisations which perform analyses infrequently. The simplicity of the interface means its easy to remember how to use the program after a period of non-use, unlike more specialised software which can cost time to relearn. We have done this by making the interface as intuitive as possible, with few self-explanatory controls using basic mechanisms such as drag-and-drop or selection from a drop-down box. \pkg{iNZight} also uses a \emph{variable first} approach, meaning users choose the variables they are interested in, and the software displays relevant actions. The easiest way to demonstrate \pkg{iNZight}'s features is by demonstration. In this section, we take a tour through the software from simple to complex.


\subsection{Loading data}\label{sec:loading-data}

Data comes in a wide range of formats, some of which are typically software-dependent \citep[such as \proglang{Excel} files,][]{msexcel}. Thanks to being open source, there are 1000's of \proglang{R} packages on \gls{cran}, amongst which are some dedicated to reading specific file formats. However, users must still know the correct package and function for their files. \pkg{iNZight} provides a simple \menu{Load Data} window from which they can select a file to import. The software detects the file type from the file extension and attempts to read the file. If successfull, a preview is displayed for the user to check before proceeding to import the file. \Cref{fig:load_data} shows the \menu{Load Data} window, which has detected a \gls{csv} file and used the appropriate function in the background. Currently, \pkg{iNZight} supports files in \gls{csv}, tab-delimited, \proglang{Excel}, \proglang{SAS}, \proglang{Stata}, \proglang{SPSS}, \proglang{R}-data, and JSON formats.

\begin{figure}[t!]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/inzight_load_data.png}
    \caption{\label{fig:load_data} Load Data window, showing the chosen file, the File Type (guessed from the extension), and a preview of the data.}
\end{figure}

In addition to the preview, \pkg{iNZight} also has an \emph{Advanced Options} section for some specific formats (currently only \gls{csv} files). Namely, this allows users to override the default delimiter, for example in European countries where the semi-colon (;) is used (the comma is reserved as the decimal separator), as well as different encoding formats. The preview is updated when these options are changed, meaning users do not have to know specifically what they need, and can quickly trial-and-error until the preview looks right.


\subsection{Creating graphs}\label{sec:creating-graphs}

Within \pkg{iNZight}, graphics are at the core of the user experience. The very first prototype included a drag-and-drop of variables to create a plot, and that is how things have remained. Behind the scenes, \pkg{iNZight} detects the variable types (numeric, categorical, of a date-time) and draws an appropriate graph. For example, a single numeric variable produces a dot plot, while a categorical variable produces a bar chart. The user does not need to know what type of graph they want to create from a chosen variable, allowing them to freely explore the dataset by drag-and-drop of variables onto the \menu{Variable} boxes (or using the drop down menus).

The first variable box is referred to as the \emph{Primary Variable of Interest}. That is, this is the variable we want to know about, and how it is influenced by other variables. For example, if `height' is chosen as Variable 1, and we want to know how `height' changes with ethnicity or age. In the latter case, the result will be a scatter plot \emph{with `height' on the $y$-axis}. In addition to the first two variable slots, \pkg{iNZight} includes two Subset variables to quickly and easily facet the plot and explore more complex relationships.

Finally, there is an entire panel dedicated to plot modifications: \menu{Add to Plot}. This is accessed either from the \menu{Plot} menu, or from the button in the \menu{Plot Toolbar}. From here, users can choose from a selection of alternative plot types (limited by the types of variables), as well as choose a colour variable, sizing variable, plot symbols, trend lines, changing axis labels and limits, and much more. The options are presented in an interactive format such that the graph updates whenever the user changes values, allowing them to explore ``what happens if \ldots'', and ``what does this do?''. The goal is to allow beginners to explore a dataset without being limited by having to learn how to do a wide range of actions. \Cref{fig:plot_modifcation} shows a graph produced by \pkg{iNZight} exploring the relationship between infant mortality and GDP, region, population, and year.

\begin{figure}[t!]
    \centering
    \includegraphics[width=\textwidth]{figure/inzight_infant_mortality.png}
    \caption[Demonstration of plot modifcations available from iNZight's Add to Plot menu.]{\label{fig:plot_modifcation} Demonstration of plot modifcations available from \pkg{iNZight}'s \menu{Add to Plot} menu.}
\end{figure}


\subsection{Summaries and inference}\label{sec:summaries-and-inference}

To supplement the visual graphics, \pkg{iNZight} also provides two textual output modes: \emph{summaries} and \emph{inference}, accessed from the \menu{Get Summary} and \menu{Get Inference} buttons respectively. Summary information includes basic information about the chosen variables, including mean, standard deviation, quantiles, and so on, acting as a quick reference for values that are likely estimable from the graph itself.

The inference information provides confidence intervals for quantities such as means and proportions, and additionally provides a simple interface for performing hypothesis tests. \pkg{iNZight} displays a selection of tests available for the chosen variable(s), as shown in \cref{tab:hypothesis-tests}. The inference information can either be calculated using Normal theory or bootstrap methods \citep[using the \pkg{boot} package,][]{boot}.


<<hypothesis_tests,results=tex,echo=FALSE>>=
library(magrittr)
library(kableExtra)
tab <- cbind(
    c('numeric', 'categorical', ''),
    c('', '2 levels', '2+ levels'),
    c('t-test$^1$', 'single proportion', '$\\chi^2$-test$^2$'),
    c('--', 't-test$^3$', 'ANOVA'),
    c('t-test$^3$', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$'),
    c('ANOVA', '$\\chi^2$-test$^{4,5}$', '$\\chi^2$-test$^4$')
)
kable(tab,
    "latex",
    booktabs = TRUE,
    caption = 'iNZight hypothesis test options. ',
    label = 'hypothesis-tests',
    # align = "center",
    escape = FALSE) %>%
    add_header_above(c('', '', 'NULL', 'numeric', '2 level cat', '2+ level cat')) %>%
    add_header_above(c("Variable 1" = 2L, "Variable 2" = 4L)) %>%
    add_footnote(
        c(
            'One-sample',
            'Equal proportions',
            'Two-sample',
            'Equal distributions',
            'Additionally includes epidemiological output such as odds and risk ratios.'
        ),
        'number', threeparttable = TRUE) %>%
    kable_styling(position = "center", full_width = FALSE)
@



\subsection{Data wrangling}\label{sec:data-wrangling}

Usually the first thing researchers want to do when they first begin exploring a dataset is to create a set of exploratory graphs. However, it is often not possible to get the correct graphs from the raw data alone. Applying transformations and other modifications to the data can allow researchers to explore the data correctly, or explore it from a different perspective. \pkg{iNZight} contains two \emph{data manipulation} menus: \menu{Data} and \menu{Variables}. The former acts on the data set as a whole, while the later modifies individual columns.

In their book \emph{\proglang{R} for Data Science}, \citet{Wickham_2017} describe many data manipulation methods including filtering, aggregation, and reshaping. They provide the \pkg{tidyverse} \citep{tidyverse} code for these actions, which \pkg{iNZight} uses behind-the-scenes to implement the behaviours. However, \pkg{iNZight} provides a \gls{gui} interface to these (often complex) methods, allowing users to quickly and easily filter by value, convert from \emph{wide} to \emph{long} form, or merge two related datasets together. In most cases, the interface allows users to fill out the fields which change according to previous selections, and at the bottom is a preview of what the data will look like, as demonstrated in \cref{fig:data_mod_preview}.

\begin{figure}[t!]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/data-mod-preview.png}
    \caption{\label{fig:data_mod_preview} Here, the user is uniting two columns to create a new variable, with the preview displayed in the bottom-right. The preview uses the first few rows of the data, and updates in real-time, reacting to changes the user makes, allowing them to experiment easily.}
\end{figure}

Supplementary to the dataset operations, the \menu{Variable} menu provides a selection of variable transformation and modification actions. For example, numeric variables can be converted to categorical (a common example is \code{Year}), or categoric variable levels can be renamed, reordered, and combined. Users also have the option of creating custom variables using \proglang{R} code, as well as renaming and deleting entire variables. In most cases, \pkg{iNZight} creates a \emph{new} variable, for example converting \code{Year} to categorical might yield the variable \code{Year.cat}, which makes the experience more exploration-friendly.


\subsection{Special data types}\label{sec:special-data}

Many data sets that our users will be exploring will be in `tidy' format \citep{Wickham_2017} (check citation), meaning rows are individual records and columns observations. However, there are some unique data types that are common for beginners to encounter, or form a core aspect of statistical education. These data sets require unique graphics to explore correctly, a task which \pkg{iNZight} has been extended to perform. Some of these are described here.


\subsubsection{Complex survey designs}\label{sec:surveys}

One of the most important data types for official statistics and research groups are complex surveys, and require information about the survey's structure to provide valid graphs, summaries, and inferences. \pkg{iNZight} handles survey designs behind the scenes, and only requires the user to specify the structure either manually, or by importing a special \emph{survey design} file. Once specified, the user can forget about the survey design and use \pkg{iNZight} as normal: survey weights will be incorporated correctly into graphs and summaries, as well as data manipulation functions, using the \pkg{survey} \citep{survey} and \pkg{srvyr} \citep{srvyr} packages behind the scenes.

\pkg{iNZight} handles two types of designs: stratified or cluster surveys, and replicate weight designs. In the former, information about the strata and clusters is contained within the dataset. However, in the interest of confidentiality, some survey datasets use \emph{replicate weights}, allowing variance estimates without exposing strata and cluster information \citep{Lumley_2010}. In addition to these, \pkg{iNZight} also provides functionality to calibrate surveys with data from other sources to reduce the estimation variances. Once again, this is performed once by the user and the used continually throughout the rest of \pkg{iNZight}.

The types of graphs available different for survey data. For a single numeric variable, a \emph{histogram} is displayed instead of a dotplot. For two numeric variables, a \emph{bubble plot} is used, which is effectively a scatter plot with points sized by the respective weights of observations. Alternatively, this can be displayed as a \emph{hex} plot also. Bar plots remain the same. Summaries accessed from the \menu{Get Summary} button display the same information, but are summaries of the population values, and are given along with the standard errors of the estimates, as shown in FIGURE.



\subsubsection{Time series}\label{sec:time-series}

Another data type many beginners will come across is \emph{time series}, and is taught in the final year of high school statistics in New Zealand \citep{}. The speciality of this data is that it must have one variable for observation times in a format that \pkg{iNZight} can understand, or can be specified manually if the user know the time information. Then a single variable can be displayed on the $y$ axis as it changes over time, typically connected by dots.

\pkg{iNZight} provides capabilities for user to graph one or more time series on a graph, showing a smoother on each one. Additionally, for teaching purposes the series can be decomposed to show the trend, seasonal, and residual components (using \gls{stl}). Animations are available to help with understanding how the various components combine to form the final series, and a simple Holt-Winters' forecast can be obtained similarly \citep{Holt_2004,Winters_1960}.

\Cref{fig:inzight_ts} shows the time series module with New Zealand visitor arrivals data. The software automatically detects the \code{Time} column when loaded, and draws the displayed graph without any user interaction. Users have a choice between \emph{additive} and \emph{multiplicative} models, and a slider to control the `smoothness' of the LOESS smoother (in red). From the \menu{Variable} list, one or more variables may be selected, and the appropriate graph drawn as chosen from the list on the right.

\begin{figure}[t!]
    \centering
    \includegraphics[width=\textwidth]{figure/inzight_time_series.png}
    \caption{\label{fig:inzight_ts} The time series module.}
\end{figure}

\subsubsection{Maps}\label{sec:maps}

\begin{itemize}
    \item another commonly seen data type
    \item either points on a map (e.g., a specialised scatter plot) or areas on a map, colour coded by variables
    \item \pkg{iNZight} can do both; regions requires data with location labels (countries, counties, regions, etc); points just a longitude and latitude variable
    \item lots of map-specific features: colour by region; aggregate time variable; plot mini plots over regions (e.g., barchart of categorical variable by region)
    \item the hard part is often figuring out shapefiles: \pkg{iNZight} lets user pick the type of map, and \pkg{iNZight} does the rest (with previews to help fine-tune)
\end{itemize}

\subsubsection{Other types}\label{sec:other-data-types}

\begin{itemize}
    \item multiple response data
    \item multivariate data (addon module, \cref{sec:addons})
    \item frequencies
    \item extensible to others too
\end{itemize}


\subsection[Code writing for getting started with R]{Code writing for getting started with \proglang{R}}\label{sec:code-writing}

One feature of other \proglang{R} \glspl{gui} is the coding interface. For example, \proglang{R} Commander provides code for each action performed, and includes an executable script, while \pkg{Deducer} sits on top of the \proglang{R} console and integrates with the coding environment. However, these both require some level of \proglang{R} coding experience to use, as well as an understanding of the analyses to be performed. \pkg{iNZight}, however, is completely separate from the \proglang{R} console, proviing an interface-only experience for beginners. And yet, all of the code used by various actions exists and is available in the \menu{R Code} script, allowing more advanced users interested in learning to code to get started.

Another feature is the inclusion of the \proglang{R} code box at the bottom of the interface, highlighted in FIGURE. This displays the code used to generate the current plot and, more importantly, can be edited by the user and run. When the user does so, the interface detects changes in the code and applies those changes to the \gls{gui}, providing a seamless way for users to begin experimenting with code whilst retaining the familiarity of the \gls{gui}.

Users can also store the code for the current plot, which places it into the \proglang{R} script. This script contains a history of all actions from importing the data through transformations and manipulations. The goal is to provide a record of what the user did, as well as something they can copy and paste into \proglang{R} and run themselves, editing where desired. This allows \proglang{R} learners to explore a dataset with a \gls{gui} tool and make the unique actions necessary, and then generate a script which they can build on and learn from. A similar code box is displayed in the \menu{Get Summary} and \menu{Get Inference} windows, with plans to implement this behaviour throughtout \pkg{iNZight} in future.

The code used by \pkg{iNZight} uses \pkg{tidyverse} \citep{tidyverse} syntax, as this provides a simple introduction to \proglang{R} with many simpler and verb-like syntax for data wrangling, and is used the \emph{\proglang{R} for Data Science} \citep{Wickham_2017}. To demonstrate the script produced by \pkg{iNZight}, APPENDIX contains the script generated during the tour presented in this section.
