\section[A tour of iNZight's features]{A tour of \pkg{iNZight}'s features}\label{sec:features}

The primary audience for \pkg{iNZight} are students of statistics and data science, but secondary groups include small research groups with small budgets and organisations which perform analyses infrequently. The simplicity of the interface means its easy to remember how to use the program after a period of non-use, unlike more specialised software which can cost time to relearn. We have done this by making the interface as intuitive as possible, with few self-explanatory controls using basic mechanisms such as drag-and-drop or selection from a drop-down box. \pkg{iNZight} also uses a \emph{variable first} approach, meaning users choose the variables they are interested in, and the software displays relevant actions. The easiest way to demonstrate \pkg{iNZight}'s features is by demonstration. In this section, we take a tour through the software from simple to complex.


\subsection{Loading data}\label{sec:loading-data}

Data comes in a wide range of formats, some of which are typically software-dependent \citep[such as \proglang{Excel} files,][]{msexcel}. Thanks to being open source, there are 1000's of \proglang{R} packages on \gls{cran}, amongst which are some dedicated to reading specific file formats. However, users must still know the correct package and function for their files. \pkg{iNZight} provides a simple \menu{Load Data} window from which they can select a file to import. The software detects the file type from the file extension and attempts to read the file. If successfull, a preview is displayed for the user to check before proceeding to import the file. \Cref{fig:load_data} shows the \menu{Load Data} window, which has detected a \gls{csv} file and used the appropriate function in the background. Currently, \pkg{iNZight} supports files in \gls{csv}, tab-delimited, \proglang{Excel}, \proglang{SAS}, \proglang{Stata}, \proglang{SPSS}, \proglang{R}-data, and JSON formats.

\begin{figure}[t!]
    \centering
    \includegraphics[width=0.6\textwidth]{figure/inzight_load_data.png}
    \caption{\label{fig:load_data} Load Data window, showing the chosen file, the File Type (guessed from the extension), and a preview of the data.}
\end{figure}

In addition to the preview, \pkg{iNZight} also has an \emph{Advanced Options} section for some specific formats (currently only \gls{csv} files). Namely, this allows users to override the default delimiter, for example in European countries where the semi-colon (;) is used (the comma is reserved as the decimal separator), as well as different encoding formats. The preview is updated when these options are changed, meaning users do not have to know specifically what they need, and can quickly trial-and-error until the preview looks right.


\subsection{Creating graphs}\label{sec:creating-graphs}

Within \pkg{iNZight}, graphics are at the core of the user experience. The very first prototype included a drag-and-drop of variables to create a plot, and that is how things have remained. Behind the scenes, \pkg{iNZight} detects the variable types (numeric, categorical, of a date-time) and draws an appropriate graph. For example, a single numeric variable produces a dot plot, while a categorical variable produces a bar chart. The user does not need to know what type of graph they want to create from a chosen variable, allowing them to freely explore the dataset by drag-and-drop of variables onto the \menu{Variable} boxes (or using the drop down menus).

The first variable box is referred to as the \emph{Primary Variable of Interest}. That is, this is the variable we want to know about, and how it is influenced by other variables. For example, if `height' is chosen as Variable 1, and we want to know how `height' changes with ethnicity or age. In the latter case, the result will be a scatter plot \emph{with `height' on the $y$-axis}. In addition to the first two variable slots, \pkg{iNZight} includes two Subset variables to quickly and easily facet the plot and explore more complex relationships.

Finally, there is an entire panel dedicated to plot modifications: \menu{Add to Plot}. This is accessed either from the \menu{Plot} menu, or from the button in the \menu{Plot Toolbar}. From here, users can choose from a selection of alternative plot types (limited by the types of variables), as well as choose a colour variable, sizing variable, plot symbols, trend lines, changing axis labels and limits, and much more. The options are presented in an interactive format such that the graph updates whenever the user changes values, allowing them to explore ``what happens if \ldots'', and ``what does this do?''. The goal is to allow beginners to explore a dataset without being limited by having to learn how to do a wide range of actions. \Cref{fig:plot_modifcation} shows a graph produced by \pkg{iNZight} exploring the relationship between infant mortality and GDP, region, population, and year.

\begin{figure}[t!]
    \centering
    \includegraphics[width=\textwidth]{figure/inzight_infant_mortality.png}
    \caption[Demonstration of plot modifcations available from iNZight's Add to Plot menu.]{\label{fig:plot_modifcation} Demonstration of plot modifcations available from \pkg{iNZight}'s \menu{Add to Plot} menu.}
\end{figure}


\subsection{Summaries and inference}\label{sec:summaries-and-inference}

To supplement the visual graphics, \pkg{iNZight} also provides two textual output modes: \emph{summaries} and \emph{inference}, accessed from the \menu{Get Summary} and \menu{Get Inference} buttons respectively. Summary information includes basic information about the chosen variables, including mean, standard deviation, quantiles, and so on, acting as a quick reference for values that are likely estimable from the graph itself.

The inference information provides confidence intervals for quantities such as means and proportions, and additionally provides a simple interface for performing hypothesis tests. \pkg{iNZight} displays a selection of tests available for the chosen variable(s), as shown in TABLE. The inference information can either be calculated using Normal theory or bootstrap methods \citep[using the \pkg{boot} package,][]{boot}.


\subsection{Data wrangling}\label{sec:data-wrangling}

Usually the first thing researchers want to do when they first begin exploring a dataset is to create a set of exploratory graphs. However, it is often not possible to get the correct graphs from the raw data alone. Applying transformations and other modifications to the data can allow researchers to explore the data correctly, or explore it from a different perspective. \pkg{iNZight} contains two \emph{data manipulation} menus: \menu{Data} and \menu{Variables}. The former acts on the data set as a whole, while the later modifies individual columns.

In their book \emph{R for Data Science}, \citet{Wickham_2017} describe many data manipulation methods including filtering, aggregation, and reshaping. They provide the \pkg{tidyverse} \citep{tidyverse} code for these actions, which \pkg{iNZight} uses behind-the-scenes to implement the behaviours. However, \pkg{iNZight} provides a \gls{gui} interface to these (often complex) methods, allowing users to quickly and easily filter by value, convert from \emph{wide} to \emph{long} form, or merge two related datasets together. In most cases, the interface allows users to fill out the fields which change according to previous selections, and at the bottom is a preview of what the data will look like, as demonstrated in FIGURE.

Supplementary to the dataset operations, the \menu{Variable} menu provides a selection of variable transformation and modification actions. For example, numeric variables can be converted to categorical (a common example is \code{Year}), or categoric variable levels can be renamed, reordered, and combined. Users also have the option of creating custom variables using \proglang{R} code, as well as renaming and deleting entire variables. In most cases, \pkg{iNZight} creates a \emph{new} variable, for example converting \code{Year} to categorical might yield the variable \code{Year.cat}, which makes the experience more exploration-friendly.


\subsection{Special data types}\label{sec:special-data}

\begin{itemize}
    \item a lot of data is simple rows of individual observations
    \item most standard graph types offered by \pkg{iNZight} can cover the basic explorations
    \item some cases where either the data has unique features that \emph{must} be incorporated (e.g., surveys) \emph{or} the data has unique constructs and needs a specific exploration techniques (time series, multiple response)
    \item \pkg{iNZight} provides capabilities for some of each (plus extensibility for more)
\end{itemize}

\subsubsection{Complex survey designs}\label{sec:surveys}

\begin{itemize}
    \item native handling of surveys: set and forget
    \item stratified/cluster surveys; replicate weight surveys; post-stratification/calibration
    \item design stored and used in place of dataset: graphs, summaries, transformations all use survey-specific functions from the \pkg{survey} package \citep{survey}.
\end{itemize}

\subsubsection{Time series}\label{sec:time-series}

\subsubsection{Maps}\label{sec:maps}

\subsubsection{Other types}\label{sec:other-data-types}

\begin{itemize}
    \item multiple response data
    \item multivariate data (addon module, \cref{sec:addons})
    \item frequencies
    \item extensible to others too
\end{itemize}


\subsection[Code writing for getting started with R]{Code writing for getting started with \proglang{R}}\label{sec:code-writing}

\begin{itemize}
    \item displays code for current plot (if enabled)
    \item can be edited -> \gls{gui} updates
    \item can be saved to `script'
    \item \pkg{iNZight} keeps history of all actions as \proglang{R} code -> can copy and paste into \proglang{R}, edit manually, share, etc
\end{itemize}

[[ show code history in Appendix for the demo session; note: plots not saved unless requested ]]
