\section{Installation and availability}\label{sec:installation}

As an \proglang{R} package, \pkg{iNZight} may be installed manually from the \proglang{R} console like any other package. We have an \proglang{R} repository available at \url{https://r.docker.stat.auckland.ac.nz} which hosts the most up-to-date versions of our packages. Most of these are now on \gls{cran}, and work continues to publish the remainder. Since \pkg{iNZight} is a \gls{gui}, there are one or two additional system dependencies that need to be installed, with variations between operating systems, as discussed below.


\subsection{Operating system specific requirements}\label{sec:os-reqs}

The GTK windowing system is a cross-platform project with libraries available on Windows, macOS, and Linux. However, the install process varies between operating system in both steps and complexity. On Windows, the necessary files are available in binary form, and can be installed \emph{after} installing \pkg{iNZight}: the \pkg{RGtk2} package will prompt the user to download and install these binaries on the first run.

On macOS, users are required to install XQuartz and the GTK+ framework before manually compiling \pkg{RGtk2} themselves as, unfortunately, the binaries are no longer supported on \gls{cran}. The complexity of this setup, and the lack of backwards compatibility of the macOS operating system, means we cannot officially support \pkg{iNZight} on macOS.

Finally, Linux comes in many flavours, each with different collections and names of libraries. However, the two dependencies are \code{xorg} and \code{gtk}, which are typically installed using the system package manager. For example, on the latest Ubuntu, users can install the libraries thus:
\begin{Code}
apt-get install xorg-dev libgtk2.0-dev
\end{Code}
Users of other operating systems should use the search functionality of their package manager to find the requisite libraries.


\subsection{Windows installer}\label{sec:windows}

The primary audience for \pkg{iNZight} is students new to statistics and likely computing too, and likely do not have advanced computer literacy that might be required by other \glspl{gui} to install and run the software (including \proglang{R}). To future improve the accessibility of \pkg{iNZight}, we have built a custom installer that is effectively a self-extracting \code{.exe} file which includes a copy of \proglang{R} and the package library, so once installed \pkg{iNZight} is ready to go. This is by default installed into the user's \code{Documents\\iNZightVIT} directory.

In addition to the binaries and packages, the installer includes several shortcuts which can be double-clicked to launch \proglang{R} in a specific directory. This directory contains a \code{.Rprofile} file which automatically loads the \pkg{iNZight} package and launches the \gls{gui}. It also hides the \proglang{R} console, so users are presented with just the \gls{gui} which is more familiar to them. When started from the script, \proglang{R} is passed a command to terminate the \proglang{R} session once the user has finished using \pkg{iNZight}.

The \pkg{iNZight} installer also includes an Update script, which when launched triggers an update to the \proglang{R} packages. This allows novice users to update to the latest version without needing to use \proglang{R} or re-download the entire installer. Additionally we include an Uninstaller which removes \pkg{iNZight} from the user's system if they so desire.


\subsection{Docker image}\label{sec:docker}

Docker \citep{docker} is a development and deployment solution for developers to build, test, and share their projects. It allows developers to construct build chains with all dependencies included within a single image file which can be downloaded by users to run the program without installing a large set of dependencies. We have built a docker image for \pkg{iNZight}, allowing users on macOS and Linux to run the software without installing the system dependencies. The downside of this approach is that the result is not as smooth as a native application, and also, as a \gls{gui}, requires a little more work from the user (particularly on macOS) to set up the necessary conditions for the app running in the container to project the \gls{gui} onto the host's screen. More information can be found at \url{https://github.com/iNZightVIT/docker-inzight}.


\subsection[Only shiny version iNZight Lite]%
{Online shiny version \pkg{iNZight Lite}}\label{sec:online}

\begin{itemize}
    \item for users who can't install (e.g., macOS, tablet)
    \item most of the same functionality, separate but parallel development
    \item call to same packages: same results across systems
    \item runs on \gls{aws} server: some performance issues
\end{itemize}
