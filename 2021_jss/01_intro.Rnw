\section{Introduction}\label{sec:intro}

The \proglang{R} programming environment \citep{rcore} is used throughout statistics and data science due to it being open source, easy to learn, and backed by a huge package repository to solve even the most unique of problems.
\begin{itemize}
    \item several \glspl{gui} have been developed over the years to ease access to advanced features of \proglang{R}: graphs, hypothesis tests, etc
    \item eg: \cite{Rcommander}, \cite{Deducer}
    \item these tend to work by asking users to first choose an action, then fill in the fields (including variable choice)
    \item this requires some higher level of understanding to get useful information out (i.e., need to know what a "t-test" is)
\end{itemize}

An alternative approach is to work variable-first, such that users choose variables they are interested in, and then choose from an automatically curated list of options to perform. \pkg{iNZight} uses this approach, and presents users with a exploration-focussed interface.
\begin{itemize}
    \item focus is on visualising, removing the need for any basic understanding of statistical procedures to get started with data visualisation
    \item like other \glspl{gui}, there's a code component: however, \pkg{iNZight}'s is more \emph{behind-the-scenes}; useful for seeing a history of what you've done, with a little emphasis on editing a command to see how it changes things
    \item goal is to develop data exploration skills before moving them on to coding (high-level to low-level)
\end{itemize}

Due in part to its ease of use, \pkg{iNZight} has been adopted throughout New Zealand's statistical education program. Final year high school students are introduced to basic statistical concepts using \pkg{iNZight}, including a foray into time series analysis. Universities accross the country have also begun to use \pkg{iNZight} in both introductory and some advanced statistics courses. This paper provides an overview of some of the main features of \pkg{iNZight}, along with technical details, an introduction to its \emph{Add-on} system, and description of the install process.


% A brief, 2--3 paragraphs about what \pkg{iNZight} is, and the niche it fills, plus some of its key features. Perhaps also a discussion of other \proglang{R} \glspl{gui}, and what sets \pkg{iNZight} apart (otherwise, make that last bit a separate section...?).

% \begin{itemize}
% \item getting started with statistics and data science is difficult due to the fairly steep learning curve for the necessary software
% \item \proglang{R} provides a simple programming environment for exploring and visualising data, and is becoming the tool of choice for many data scientists
% \item students/learners often have little or no programming experience: they just want to explore data, make charts, and do simple analyses \emph{before learning all the technical stuff}
% \item \pkg{iNZight} provides a simple GUI allowing users to import data, create graphs by simple drag-and-drop or picking variables from dropdowns; the software figures out what kind of variable is chosen and presents a useful graph
% \item same idea carried through: users don't need to know what they want to do, they choose \textbf{variables} they are interested in, and the software guides them
% \item since it's an \proglang{R} package, it can hook in to all the powerful packages that already exist: and writes a code history so users can (eventually) migrate from GUI to command line
% \item graphics, data manipulation, hypothesis testing, survey design, time series, model fitting, maps, and more
% \item used by NZ high schools, universities, and elsewhere ... ?
% \end{itemize}

% There are other \glspl{gui} for R, namely \proglang{R} Commander \citep{Rcommander} and \pkg{Deducer} \citep{Deducer}. Both of these software provide a range of features, centered mostly around a window-based interface to a collection of R \citep{rcore} functions. Users decide the type of analysis or function they want to use, choose it, and then fill in the fields. \pkg{iNZight} takes the opposite approach by providing an interface from which users choose *variables first*, and then processes are performed which differ based on the inputs.
